<?php declare(strict_types=1);

namespace Olifanton\TransportTests\Cases\Jettons;

use Olifanton\Interop\Address;
use Olifanton\Ton\Contracts\Jetton\JettonMinter;
use Olifanton\Ton\JettonOffchainMetadataFetcher;
use Olifanton\Ton\Transport;
use Olifanton\TransportTests\AsCase;
use Olifanton\TransportTests\HttpClient;
use Olifanton\TransportTests\TestCase;

#[AsCase("jettons:offchain-metadata")]
class OffchainMetadata extends TestCase
{
    /**
     * @throws \Throwable
     */
    public function run(Transport $transport): void
    {
        $expected = <<<JSON
        {"name":"Test token","symbol":"TSTST","decimals":9,"image_data":"PHN2ZyB2ZXJzaW9uPSIxLjEiIHg9IjAiIHk9IjAiIHZpZXdCb3g9IjAgMCA1ODUuMiA2NDYuMSIgc3R5bGU9ImVuYWJsZS1iYWNrZ3JvdW5kOm5ldyAwIDAgNTg1LjIgNjQ2LjEiIHhtbDpzcGFjZT0icHJlc2VydmUiIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyI+PGRlZnMgaWQ9ImRlZnMxNiI+PGxpbmVhckdyYWRpZW50IGlkPSJsaW5lYXJHcmFkaWVudDE3MTUiIGdyYWRpZW50VW5pdHM9InVzZXJTcGFjZU9uVXNlIiB4MT0iMTY4LjA3IiB5MT0iNzQuMDE0IiB4Mj0iNDI3LjA3NCIgeTI9IjU5Mi4wMjMiPjxzdG9wIG9mZnNldD0iMCIgc3R5bGU9InN0b3AtY29sb3I6IzAwYjNmMiIgaWQ9InN0b3A0LTMiLz48c3RvcCBvZmZzZXQ9IjEiIHN0eWxlPSJzdG9wLWNvbG9yOiMwMDdlZDAiIGlkPSJzdG9wNi02Ii8+PC9saW5lYXJHcmFkaWVudD48L2RlZnM+PHN0eWxlIHR5cGU9InRleHQvY3NzIiBpZD0ic3R5bGUyIj4uc3Qwe2ZpbGw6dXJsKCNTVkdJRF8xXyl9PC9zdHlsZT48ZyBpZD0iZzExIj48bGluZWFyR3JhZGllbnQgaWQ9IlNWR0lEXzFfIiBncmFkaWVudFVuaXRzPSJ1c2VyU3BhY2VPblVzZSIgeDE9IjE2OC4wNyIgeTE9Ijc0LjAxNCIgeDI9IjQyNy4wNzQiIHkyPSI1OTIuMDIzIiBncmFkaWVudFRyYW5zZm9ybT0idHJhbnNsYXRlKDEuOTg2KSI+PHN0b3Agb2Zmc2V0PSIwIiBzdHlsZT0ic3RvcC1jb2xvcjojMDBiM2YyIiBpZD0ic3RvcDQiLz48c3RvcCBvZmZzZXQ9IjEiIHN0eWxlPSJzdG9wLWNvbG9yOiMwMDdlZDAiIGlkPSJzdG9wNiIvPjwvbGluZWFyR3JhZGllbnQ+PHBhdGggY2xhc3M9InN0MCIgZD0iTTUzNC40OSAxMzAuNDMgMzQxLjQzIDE5LjAwNGE5My42MDkgOTMuNjA5IDAgMCAwLTkzLjY4OSAwTDU0LjY4MSAxMzAuNDNjLTI5LjAxNSAxNi43NDYtNDYuODQ0IDQ3LjcyNi00Ni44NDQgODEuMTQ0djIyMi44NTJhOTMuNjMgOTMuNjMgMCAwIDAgNDYuODQ0IDgxLjE0NGwxOTIuOTYyIDExMS40MjZjMjkuMDA4IDE2Ljc1OCA2NC43NzggMTYuNzU4IDkzLjY4OCAwbDE5My4wNi0xMTEuNDI2YTkzLjYzIDkzLjYzIDAgMCAwIDQ2Ljg0NC04MS4xNDRWMjExLjU3NGMuMDk4LTMzLjQxOC0xNy43MzgtNjQuMzg2LTQ2Ljc0Ni04MS4xNDR6IiBpZD0icGF0aDktNyIgc3R5bGU9ImZpbGw6I2ZmZjtzdHJva2Utd2lkdGg6Ljk4Ii8+PHBhdGggY2xhc3M9InN0MCIgZD0ibTUzOS4zODYgMTI2LjUtMTk3LTExMy43YTk1LjUyIDk1LjUyIDAgMCAwLTk1LjYgMGwtMTk3IDExMy43Yy0yOS42MDcgMTcuMDg4LTQ3LjggNDguNy00Ny44IDgyLjh2MjI3LjRjMCAzNC4yIDE4LjIgNjUuNyA0Ny44IDgyLjhsMTk2LjkgMTEzLjdjMjkuNiAxNy4xIDY2LjEgMTcuMSA5NS42IDBsMTk3LTExMy43YTk1LjU0IDk1LjU0IDAgMCAwIDQ3LjgtODIuOFYyMDkuM2MuMS0zNC4xLTE4LjEtNjUuNy00Ny43LTgyLjh6bS0zMzUuNy0zN2MzLjYtNi4yIDkuOS05LjggMTctOS44aDE0Ny43YzcuMSAwIDEzLjUgMy43IDE3IDkuOCAzLjYgNi4yIDMuNiAxMy41IDAgMTkuN2wtNzMuOSAxMjcuOWMtMy42IDYuMi05LjkgOS44LTE3IDkuOHMtMTMuNS0zLjctMTctOS44bC03My45LTEyNy45Yy0zLjUtNi4yLTMuNS0xMy41LjEtMTkuN3ptMTcuMiAyNjIuOGMtOS4yIDAtMTYuNi03LjQtMTYuNi0xNi42IDAtOS4yIDcuNC0xNi42IDE2LjYtMTYuNiA5LjIgMCAxNi42IDcuNCAxNi42IDE2LjYgMCA5LjItNy41IDE2LjYtMTYuNiAxNi42em01LjQtNjcuNWMtMzEuNiAwLTU3LjQgMjUuNy01Ny40IDU3LjR2MTU4LjZjMCAxNC4zIDExLjcgMjYgMjYgMjYgNS4yIDAgOS40IDQuMiA5LjQgOS4zIDAgNS4yLTQuMiA5LjMtOS40IDkuMy0yNC42IDAtNDQuNi0yMC00NC42LTQ0LjZWMzQyLjJjMC00MS45IDM0LjEtNzYgNzYtNzZoNjEuN2MxMC4zIDAgMjAuMSA1IDI2LjIgMTMuNCA3LjMgMTAuMSAxNSAyNi44IDEwLjMgNDkuMi0yLjUgMTEuOC04LjMgMjMuMi0xNi43IDMzLTkuNCAxMS0yNS4zIDI1LTQ3LjUgMjkuOS01IDEuMS0xMC0yLjEtMTEuMS03LjEtMS4xLTUgMi4xLTEwIDcuMS0xMS4xIDE3LjItMy44IDI5LjgtMTUgMzcuMy0yMy44IDYuNC03LjQgMTAuNy0xNiAxMi42LTI0LjcgMy4zLTE1LjctMi4xLTI3LjMtNy4xLTM0LjMtMi42LTMuNS02LjctNS43LTExLTUuN2gtNjEuOHptMjEyLjYgMjMxLjZjMCAyMi45LTE4LjYgNDEuNS00MS41IDQxLjVzLTQxLjUtMTguNi00MS41LTQxLjV2LTYwLjdjMC03LjItNS44LTEzLTEzLTEzcy0xMyA1LjgtMTMgMTN2NjAuN2MwIDIyLjktMTguNiA0MS41LTQxLjUgNDEuNXMtNDEuNS0xOC42LTQxLjUtNDEuNXYtODcuMmMwLTUuMiA0LjItOS40IDkuMy05LjQgNS4yIDAgOS4zIDQuMiA5LjMgOS40djg3LjJjMCAxMi42IDEwLjMgMjIuOCAyMi44IDIyLjhzMjIuOC0xMC4zIDIyLjgtMjIuOHYtNjAuN2MwLTE3LjUgMTQuMi0zMS43IDMxLjctMzEuN3MzMS43IDE0LjIgMzEuNyAzMS43djYwLjdjMCAxMi42IDEwLjIgMjIuOCAyMi44IDIyLjggMTIuNiAwIDIyLjgtMTAuMyAyMi44LTIyLjhWMzM4LjFjMC0yOS4zLTIzLjktNTMuMi01My4yLTUzLjJoLTI3LjNjLTItNi44LTUuMS0xMy05LTE4LjdoMzYuNGMzOS42IDAgNzEuOSAzMi4zIDcxLjkgNzEuOXptLTY5LjEtNDE3LjhjLS4zLS41LS43LS44LTEuMy0uOGgtNjQuOHYxMTYuOGw2Ni4xLTExNC41Yy4zLS41LjMtMSAwLTEuNXptLTg0LjMgMTE2Vjk3LjhoLTY0LjhjLS42IDAtMSAuMy0xLjMuOC0uMy41LS4zIDEgMCAxLjV6IiBpZD0icGF0aDkiIHN0eWxlPSJmaWxsOnVybCgjU1ZHSURfMV8pIi8+PC9nPjwvc3ZnPg==","description":"Test token"}
        JSON;

        $metadataFetcher = new JettonOffchainMetadataFetcher(
            $transport,
            HttpClient::discovery(),
        );
        $this
            ->logger
            ->debug("Jetton offchain metadata fetcher created");

        $minter = JettonMinter::fromAddress($transport, new Address("EQBvUb8oMMT7UqrNoOqVP8wL5P6zUjbNeeQXqLbWl0gaDJke"));
        $metadata = $metadataFetcher->getMetadata($minter);
        $this
            ->logger
            ->debug("Metadata fetched");

        $this
            ->assert($metadata->jsonSerialize() == json_decode($expected, true), "Identical metadata");
    }
}
